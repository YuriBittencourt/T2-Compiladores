PROGRAM : STATEMENT | FUNCLIST | epsilon
FUNCLIST : FUNCDEF FUNCLIST | FUNCDEF
FUNCDEF : def IDENT (PARAMLIST) { NEW_SCOPE STATELIST END_SCOPE}
PARAMLIST : TYPES IDENT PARAMLISTITER | epsilon
PARAMLISTITER : , TYPES IDENT PARAMLISTITER | epsilon
SCOPESTATEMENT : NEW_SCOPE ONELINESTATEMENT END_SCOPE | { NEW_SCOPE STATELIST END_SCOPE }
STATEMENT : ONELINESTATEMENT | { NEW_SCOPE STATELIST END_SCOPE }
ONELINESTATEMENT: VARDECL; | ATRIBSTAT; | PRINTSTAT; | READSTAT; | RETURNSTAT; | IFSTAT; | FORSTAT; | break; | ;
VARDECL : TYPES IDENT INT
TYPES : int | float | string
INT : [INT_CONSTANT]INT | epsilon
ATRIBSTAT : LVALUE = EXPRESSION | LVALUE = ALLOCEXPRESSION | LVALUE = FUNCCALL
FUNCCALL : IDENT(PARAMLISTCALL)
PARAMLISTCALL : IDENT PARAMLISTCALLITER | epsilon
PARAMLISTCALLITER : , IDENT PARAMLISTCALLITER | epsilon
PRINTSTAT : print EXPRESSION
READSTAT : read LVALUE
RETURNSTAT : return
IFSTAT : if( EXPRESSION ) SCOPESTATEMENT ELSE
ELSE : else SCOPESTATEMENT | epsilon
FORSTAT : for(ATRIBSTAT; EXPRESSION; ATRIBSTAT) SCOPESTATEMENT
STATELIST : STATEMENT | STATEMENT STATELIST
ALLOCEXPRESSION : new TYPES NUMEXPRESSIONS
NUMEXPRESSIONS : [NUMEXPRESSION]NUMEXPRESSIONS | [NUMEXPRESSION]
EXPRESSION : NUMEXPRESSION |  NUMEXPRESSION BINARYOPERATOR
BINARYOPERATOR : RELATIONALOPERATOR NUMEXPRESSION | epsilon
RELATIONALOPERATOR : < | > | <= | >= | == | !=
NUMEXPRESSION : TERM SIGNEDTERMS
SIGNEDTERMS : SIGNAL TERM SIGNEDTERMS | epsilon
SIGNAL : + | -
TERM : UNARYEXPR UNARYITER
UNARYITER : UNARYOP UNARYEXPR UNARYITER | epsilon
UNARYOP : * | \ | %
UNARYEXPR : SIGNAL FACTOR | FACTOR
FACTOR : INT_CONSTANT | FLOAT_CONSTANT | STRING_CONSTANT | null | LVALUE | (NUMEXPRESSION)
LVALUE : IDENT | IDENT NUMEXPRESSIONS

# regexes
FLOAT_CONSTANT: ^[0-9]+\.[0-9]+?$
INT_CONSTANT: ^\d+$
STRING_CONSTANT: ^\"(.)*\"$
IDENT: ^[a-z_]([A-Za-z_0-9])*$
